信息检索导论中提到的倒排索引构建方法：
内存式单遍扫描索引构建方法（SPIMI : Single-pass in-memeory indexing）：

思想:
    将一个文档集分割成几个大小相等的部分，参考标准就是分成的每个块可以一次性的装入内存将处理每个块产生的词典写入磁盘，
    对于下一个块则重新采用新的词典。只要硬盘空间足够大，SPIMI就能索引任何大小的文档集。

算法流程（在执行过程中反复调用SPIMI-Invert函数直到将全部文档集处理完成）：
SPIMI-Invert(token_stream)
    output_file = NEWFILE()  
    dictionary = NEWHASH()
    while(free memory available)
    do token ← next(token_stream)
    if term(token) !∈dictionary   // 即不在词典中
        then postings_list =  AddToDictionary(dictionary, term(token))   // 加入词典并返回词典位置
   else postings_list =  GetPostingList(dictionary, term(token))      // 找到词典位置
   if full(postings_list)                                             // 关键词对应存储倒排文档的数据结构可用空间是否已满
        then postings_list = DoublePostingList(dictinary, term(token))// 重新分配关键词对应存储倒排文档的数据结构可用空间 使其变为原来2倍
   AddToPostingsList(postings_list, docId(token))                 // 将文档信息放入倒排表中
   sorted_terms ← SortTerms(dictionary)                           //对词典排序（便于以后合并词典）
   WriteBlockToDisk(sorted_terms, dictionary, output_file)        // 将倒排信息写入磁盘
   return output_file


Gamma编码：
构建索引的时候，采用分词工具将这些网页或者文章分成一个个词，并网页id存储在称为倒排索引表的数据结构中。 

由于网络空间巨大，对应的倒排索引表所占的空间也很大，对倒排索引表进行压缩显得非常必要。由于倒排索引表中
存储的全部都是数字，对其进行压缩有着专门的方法，Gamma编码就是其中的一种。Gamma编码是一种基于位的变长编码，
介绍它之前先说一下一元编码。 

一元编码：
将 n 表示成 n 个1和最后一个0， 
比如： 3的一元码是 1110 
40的一元码是 11111111111111111111111111111111111111110

Gamma将数G字表示成长度（length）和偏移（offset）两部分；
offset部分对应G的二进制编码，只不过将首部的1去掉。 
例如 13 → 1101 → 101 = 偏移；
length部分采用一元编码，表示偏移部分的位数。 
例如G=13(偏移101)，偏移长度为3，一元编码1110
G的ϒ编码就是将长度部分和偏移部分两者联接起来得到的结果。
























